== Gestion des équipements

La page de gestion des équipements est accessible via le menu `Plugins -> Protocole domotique -> jMQTT`.

Le panneau supérieur, intitulé _Gestion_, permet:

   - La <<Création manuelle d\'un équipement>>;
   - L'activation du mode <<Inclusion automatique des équipements>>;
   - L'accès à la <<Configuration du plugin>>;
   - L'accès à la page <<Santé du plugin>>.

Le panneau inférieur, _Mes jMQTT_ affiche les équipements présents. A noter que:
   
   - Un équipement grisé est inactif;
   - Un équipement cerclé d'une bordure bleue-mauve, ou grise si inactif, est un équipement dont l'_Ajout automatique des commandes_ est activé.
   

=== Inclusion automatique des équipements

Le mode inclusion automatique permet la découverte et la création automatique des équipements. Il s'active en cliquant sur le bouton _Mode inclusion_. Il se désactive en recliquant sur le même bouton, ou automatiquement après 2 à 3 min.

Le plugin souscrit auprès du broker le topic configuré dans la page de <<Configuration du plugin>> (# par défaut, i.e. tous les topics). A réception d'un message dont le topic de premier niveau est nouveau, le plugin crée automatiquement un équipement associé à ce topic de premier niveau.

Prenons comme exemple une payload MQTT publiant les messages suivants:
....
boiler/brand "viesmann"
boiler/burner 0
boiler/temp 70.0
....

A l'arrivée du premier message, le plugin crée automatiquement un équipement nommé _boiler_. Nous verrons dans la section <<Onglet Commandes>> que, par défaut, il créé aussi les informations associées à chaque message. 

TIP: Le mode inclusion automatique des équipements n'influe que sur la création de l'équipement, et pas sur la création des informations associées, qui dépend du paramètre _Ajout automatique des commandes_ que nous verrons dans le chapitre suivant.

NOTE: Une fois les équipements découverts, il est conseillé de quitter le mode automatique pour éviter la création d'équipements non souhaités, notamment dans les situations suivantes : publication de messages (si jMQTT reste souscrit à tous les topics, il écoutera ses propres publications), essais avec le broker, tests de nouveaux équipements, ...

=== Paramètres de l'équipement

==== Onglet Equipement
Dans le premier onglet d'un équipement jMQTT, nous trouvons les paramètres communs aux autres équipements Jeedom, ainsi que quatre paramètres spécifiques au plugin:

   - Inscrit au Topic: topic de souscription auprès du broker;
   - Ajout automatique des commandes: si coché, les commandes de type information seront automatiquement créés par le plugin, et l'équipement apparaitra cerclé d'une bordure dans la page de <<Gestion des équipements>>. La case est cochée par défaut;
   - Qos: qualité de service souscrit;
   - Catégorie du topic: sélection d'une image spécifique à l'équipement.

Parmis le boutons en haut à gauche:

   - `Export` permet d'obtenir un fichier JSON de toutes les informations de l'équipement. Il n'y a pas de fonctionalité import, le fichier peut surtout s'avérer utile pour investiguer sur problèmes;
   - `Dupliquer` permet de <<Dupliquer un équipement>>.

IMPORTANT: Une fois les commandes créés, il est conseillé de décocher la case _Ajout automatique des commandes_ pour éviter la création d'informations non souhaitées.

==== Onglet Commandes

===== Commandes de type Information

.Payload simple
Les commandes de type information (informations dans la suite) sont créés automatiquement si la case _Ajout automatique des commandes_ de l'Onglet Equipement est cochée. Reprenons l'exemple de la payload MQTT publiant les messages suivants:
....
boiler/brand "viesmann"
boiler/burner 0
boiler/temp 70.0
boiler/ext_temp 19.3
boiler/hw/setpoint 50
boiler/hw/temp 49.0
....

Le plugin créé les informations suivantes:

|===
|Nom|Sous-Type|Topic|Valeur

|boiler/brand
|info
|boiler/brand
|viesmann

|boiler/burner
|info
|boiler/burner
|0

|boiler/temp
|info
|boiler/temp
|70.0

|boiler/ext_temp
|info
|boiler/ext_temp
|19.3

|boiler/hw/setpoint
|info
|boiler/hw/setpoint
|50

|boiler/hw/temp
|info
|boiler/hw/temp
|49.0
|===

.Payload JSON
Dans le cas d'une payload JSON, le plugin peut décoder le contenu et créer les informations associées, et ceci indépendamment de l'état de la case _Ajout automatique des commandes_ de l'Onglet Equipement. Cette fonctionnalité doit être activée manuellement pour chaque commande information de ce type.

Prenons l'exemple de la payload JSON suivante:
....
esp/temperatures {"device": "ESP32", "sensorType": "Temperature", "values": [9.5, 18.2, 20.6]}
....

Au premier message reçu, jMQTT créé automatiquement l'information suivante:
|===
|Nom|Sous-Type|Topic|Valeur|Paramètres

|esp/temperatures
|info
|esp/temperatures
|{"device": "ESP32", "sensorType": "Temperature", "values": [9.5, 18.2, 20.6]}
|`[ ]` parseJSON
|===

En cochant l'option _parseJSON_, les informations complémentaires sont instantanément créés, ce qui donne:

|===
|Nom|Sous-Type|Topic|Valeur|Paramètres

|esp/temperatures
|info
|esp/temperatures
|{"device": "ESP32", "sensorType": "Temperature", "values": [9.5, 18.2, 20.6]}
|`[X]` parseJSON

|temperatures{device}
|info
|esp/temperatures{device}
|"ESP32"
|`[ ]` parseJSON

|temperatures{sensorType}
|info
|esp/temperatures{sensorType}
|"Temperature"
|`[ ]` parseJSON

|temperatures{values}
|info
|esp/temperatures{values}
|[9.5, 18.2, 20.6]
|`[ ]` parseJSON

|===

Enfin, le vecteur des températures peut également être séparé en cochant la case  _parseJSON_, pour finalement obtenir:

|===
|Nom|Sous-Type|Topic|Valeur|Paramètres

|esp/temperatures
|info
|esp/temperatures
|{"device": "ESP32", "sensorType": "Temperature", "values": [9.5, 18.2, 20.6]}
|`[X]` parseJSON

|temperatures{device}
|info
|esp/temperatures{device}
|"ESP32"
|`[ ]` parseJSON

|temperatures{sensorType}
|info
|esp/temperatures{sensorType}
|"Temperature"
|`[ ]` parseJSON

|temperatures{values}
|info
|esp/temperatures{values}
|[9.5, 18.2, 20.6]
|`[X]` parseJSON

|temperatures{values}{0}
|info
|esp/temperatures{values}{0}
|9.5
|`[ ]` parseJSON

|temperatures{values}{1}
|info
|esp/temperatures{values}{1}
|18.2
|`[ ]` parseJSON

|temperatures{values}{2}
|info
|esp/temperatures{values}{2}
|20.6
|`[ ]` parseJSON

|===

NOTE: Le nom des commandes peut être modifié comme souhaité, jMQTT se base sur le champ Topic pour associer la bonne valeur. 

===== Commandes de type Action

Les commandes de type action permettent au plugin jMQTT de publier sur le broker MQTT. Pour cela, créer une commande via le bouton _+ Ajouter une commande action_ et remplir les champs selon le besoin:

    * Nom: champ libre;
    * Valeur par défaut de la commande: pour lier la valeur de la commande affichée sur le dashboard à une commande de type Information (exemple https://www.jeedom.com/forum/viewtopic.php?f=96&t=32675&p=612364#p602740[ici]);
    * Sous-type: voir exemples ci-dessous;
    * Topic: topic de publication;
    * Valeur: définit la valeur publiée, i.e. la payload en langage MQTT, voir exemples ci-dessous;
    * Retain: si coché, la valeur sera persistante (conservée par le broker et publiée vers tout nouveau souscripteur);
    * Qos: niveau de qualité de service utilisé pour publier la commande (1 par défaut).

.Sous-type Défaut
Les exemples du tableau suivant:

|===
|Nom|Sous-Type|Topic|Valeur

|set_hw_setpoint
|action - Défaut
|`hw/setpoint/set`
|`40`

|set_hw_setpoint
|action - Défaut
|`hw/set`
|`{"name": "setpoint", "value": 40}`

|set_hw_setpoint
|action - Défaut
|`hw/set`
|`{"name": "setpoint", "value": \#[home][boiler][hw_setpoint]#}`

|===

Publieront respectivement:
....
hw/setpoint/set 40
hw/set {"name": "setpoint", "value": 40}
hw/set {"name": "setpoint", "value": 45}
....
En supposant que `\#[home][boiler][hw_setpoint]#` a pour valeur 45.


.Sous-type Curseur
Les configurations suivantes publieront la valeur saisie via un widget de type curseur:

|===
|Nom|Sous-Type|Topic|Valeur

|set_hw_setpoint
|action - Curseur
|`hw/setpoint/set`
|`\#slider#`

|set_hw_setpoint
|action - Curseur
|`hw/set`
|`{"name": "setpoint", "value": \#slider#}`
|===
Soit respectivement, en supposant que la valeur du curseur est 50:
....
hw/setpoint/set 50
hw/set {"name": "setpoint", "value": 50}
....

.Sous-type Message
Pour un message dont le titre est `ecs` et le contenu est `50`, la configuration ci-après publiera:
....
boiler {"setpoint": "ecs", "value": 50}
....

|===
|Nom|Sous-Type|Topic|Valeur

|set_ecs_setpoint
|action - Message
|`boiler`
|`{"setpoint": "\#title#", "value": \#message#}`
|===

.Sous-type Couleur
La configuration suivante publiera le code couleur sélectionnée via un widget sélecteur de couleur, par exemple:
....
room/lamp/color #e63939
....

|===
|Nom|Sous-Type|Topic|Valeur

|set_color
|action - Couleur
|`room/lamp/color`
|`\#color#`
|===

===== Vue Classic, vue JSON

Deux boutons en haut à droite de la page permettent de choisir entre 2 types du vue:

    * La vue *Classic* montre les commandes dans l'ordre d'affichage sur la tuile du Dashboard. Elle permet de les réordonner par glissé/déposé;
    * La vue *JSON* affiche un arbre hiérarchique permettant de naviguer dans les commandes JSON, de les déplier/replier. Dans cette vue, l'ordonnancement des commandes via glissé/déposé est désactivée.

=== Création manuelle d\'un équipement

Il est aussi possible de créer manuellement des équipements jMQTT. Cliquer sur le bouton *+* et saisir le nom de l'équipement. Dans la page <<Onglet Equipement>>, le topic de souscription définit les informations qui seront souscrites par l'équipement.

Pour plus d'information sur les topics MQTT, nous conseillons la lecture de https://www.hivemq.com/blog/mqtt-essentials-part-5-mqtt-topics-best-practices[MQTT Essentials Part 5: MQTT Topics & Best Practices].

=== Dupliquer un équipement

Un équipement peut être dupliqué via le bouton `Dupliquer` situé en haut à gauche de la page de configuration de l'équipement.

Une boite de dialogue demande le nom du nouvel équipement. Sont dupliqués:

   * Tous les paramètres de l'équipement y compris les paramètres de configuration avancés, sauf:
     ** Le nom bien sûr,
     ** Le statut _Activer_ : l'équipement est désactivé par défaut,
     ** Le topic de souscription qui est laissé vide;
   * Les commandes de type action y compris leurs paramètres de configuration accessibles via la roue crantée.

IMPORTANT: Le topic des commandes dupliquées de type action doit être modifié manuellement.

NOTE: Les commandes de type info ne sont pas dupliquées. Elles seront découvertes automatiquement après définition du topic de souscription et activation de l'équipement, si la case _Ajout automatique des commandes_ est cochée.

=== Santé du plugin

Ce chapitre est à écrire.

IMPORTANT: La colonne _Status_ n'est pas significative, elle indique toujours OK. Sera corrigé dans une version ultérieure du plugin.

=== L'équipement jeedom

Le plugin jMQTT publie en mode persistant son état de connexion sous le topic `_Identifiant de connexion_/status`, `jeedom/status` par défaut, puisque l'identifiant de connexion vaut jeedom par défaut et se configure via la page de <<Configuration du plugin>>.

Les valeurs possibles sont `offline` et `online`.

Lorsque Jeedom est en mode <<Inclusion automatique des équipements>>, il créé un équipement, dont le nom est `_Identifiant de connexion_` qui a ce statut en information.

Cet état permet à un équipement externe à Jeedom de connaitre son statut de connexion. Il peut aussi servir en interne Jeedom pour monitorer la connexion au broker via un scénario.
