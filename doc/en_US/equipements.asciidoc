== Configuration des équipements

Les équipements sont accessibles via le menu `Plugins -> Protocole domotique -> jMQTT`.

=== Souscription automatique

Le mode souscription automatique permet la découverte automatique des équipements. Il s'active via la page de <<Configuration du plugin>>. Le plugin souscrit auprès du broker le topic configuré dans cette même page (# par défaut, i.e. tous les topics). A réception d'un message dont le topic de premier niveau est nouveau, le plugin crée automatiquement un équipement associé à ce topic de premier niveau.

Prenons comme exemple une payload MQTT publiant les messages suivants:
....
boiler/brand "viesmann"
boiler/burner 0
boiler/temp 70.0
....

A l'arrivée du premier message, le plugin crée automatiquement un équipement nommé _boiler_. Nous verrons dans la section <<Onglet Commandes>> qu'il créé aussi les informations associées à chaque message. 

TIP: Le mode souscription automatique n'influe que sur la création de l'équipement, pas sur la création des informations associées: une fois l'équipement créé, les informations nouvelles seront ajoutées que le plugin soit dans le mode automatique ou pas.

IMPORTANT: Une fois les équipements découverts, il est conseillé de quitter le mode automatique pour éviter la création d'équipements ou d'informations non souhaités, notamment dans les situations suivantes : publication de messages (si jMQTT reste souscrit à tous les topics, il écoutera ses propres publications), essais avec le broker, tests de nouveaux équipements, ...

=== Paramètres de l'équipement

==== Onglet Equipement
Dans le premier onglet d'un équipement jMQTT, nous trouvons les paramètres communs aux autres équipements Jeedom, ainsi que trois paramètres spécifiques au plugin:

   - Inscrit au Topic: topic de souscrition auprès du broker.
   - Qos: qualité de service souscrit.
   - Catégorie du topic: sélection d'une image spécifique à l'équipement.

Le bouton `Dupliquer`, en haut à gauche, permet de <<Dupliquer un équipement>>.

==== Onglet Commandes

===== Commandes de type Information

.Payload simple
Les commandes de type information (informations dans la suite) sont créés automatiquement. Reprenons l'exemple de la payload MQTT publiant les messages suivants:
....
boiler/brand "viesmann"
boiler/burner 0
boiler/temp 70.0
boiler/ext_temp 19.3
boiler/hw/setpoint 50
boiler/hw/temp 49.0
....

Le plugin créé les informations suivantes:

|===
|Nom|Sous-Type|Topic|Valeur

|boiler/brand
|info
|boiler/brand
|viesmann

|boiler/burner
|info
|boiler/burner
|0

|boiler/temp
|info
|boiler/temp
|70.0

|boiler/ext_temp
|info
|boiler/ext_temp
|19.3

|boiler/hw/setpoint
|info
|boiler/hw/setpoint
|50

|boiler/hw/temp
|info
|boiler/hw/temp
|49.0
|===

.Payload JSON
Dans le cas d'une payload JSON, le plugin peut décoder le contenu et créer les informations associées. Cette fonctionnalité doit être activée manuellement pour chaque information de ce type.

Prenons l'exemple de la payload JSON suivante:
....
esp/temperatures {"device": "ESP32", "sensorType": "Temperature", "values": [9.5, 18.2, 20.6]}
....

Au premier message reçu, jMQTT créé automatiquement l'information suivante:
|===
|Nom|Sous-Type|Topic|Valeur|Paramètres

|esp/temperatures
|info
|esp/temperatures
|{"device": "ESP32", "sensorType": "Temperature", "values": [9.5, 18.2, 20.6]}
|`[ ]` parseJSON
|===

En cochant l'option _parseJSON_, au message reçu suivant, les informations complémentaires sont créés, ce qui donne:

|===
|Nom|Sous-Type|Topic|Valeur|Paramètres

|esp/temperatures
|info
|esp/temperatures
|{"device": "ESP32", "sensorType": "Temperature", "values": [9.5, 18.2, 20.6]}
|`[X]` parseJSON

|temperatures{device}
|info
|esp/temperatures{device}
|"ESP32"
|`[ ]` parseJSON

|temperatures{sensorType}
|info
|esp/temperatures{sensorType}
|"Temperature"
|`[ ]` parseJSON

|temperatures{values}
|info
|esp/temperatures{values}
|[9.5, 18.2, 20.6]
|`[ ]` parseJSON

|===

Enfin, lle vecteur des températures peut également être séparé en cochant la case  _parseJSON_, pour finalement obtenir:

|===
|Nom|Sous-Type|Topic|Valeur|Paramètres

|esp/temperatures
|info
|esp/temperatures
|{"device": "ESP32", "sensorType": "Temperature", "values": [9.5, 18.2, 20.6]}
|`[X]` parseJSON

|temperatures{device}
|info
|esp/temperatures{device}
|"ESP32"
|`[ ]` parseJSON

|temperatures{sensorType}
|info
|esp/temperatures{sensorType}
|"Temperature"
|`[ ]` parseJSON

|temperatures{values}
|info
|esp/temperatures{values}
|[9.5, 18.2, 20.6]
|`[X]` parseJSON

|temperatures{values}{0}
|info
|esp/temperatures{values}{0}
|9.5
|`[ ]` parseJSON

|temperatures{values}{1}
|info
|esp/temperatures{values}{1}
|18.2
|`[ ]` parseJSON

|temperatures{values}{2}
|info
|esp/temperatures{values}{2}
|20.6
|`[ ]` parseJSON

|===

NOTE: Le nom des commandes peut être modifié comme souhaité, jMQTT se base sur le champ Topic pour associer la bonne valeur. 

===== Commandes de type Action

Les commandes de type action permettent au plugin jMQTT de publier sur le broker MQTT. Pour cela, créer une commande via le bouton _+ Ajouter une commande action_ et remplir les champs selon le besoin:

    * Nom: champ libre
    * Sous-type: voir exemples ci-dessous
    * Topic: topic de publication
    * Valeur: définit la valeur publiée, i.e. la payload en langage MQTT, voir exemples ci-dessous
    * Retain: si coché, la valeur sera persistante (conservée par le broker et publiée vers tout nouveau souscripteur)
    * Qos: niveau de qualité de service utilisé pour publier la commande (1 par défaut)

.Sous-type Défaut
La configuration suivante publiera:
....
ecs/temp_setpoint 40
....

Il est bien sûr possible de mettre la valeur courante d'un autre équipement en lieu et place de la valeur 40.

|===
|Nom|Sous-Type|Topic|Valeur

|set_ecs_setpoint
|action

Défaut
|`ecs/temp_setpoint`
|`40`
|===

.Sous-type Curseur
La configuration suivante publiera sous le topic _ecs/temp_setpoint_, la valeur entrée via un widget de type curseur:

|===
|Nom|Sous-Type|Topic|Valeur

|set_ecs_setpoint
|action

Curseur
|`ecs/temp_setpoint`
|`\#slider#`
|===

.Sous-type Message
Pour un message dont le titre est `ecs` et le contenu est `50`, la configuration ci-après publiera:
....
boiler {"setpoint": "ecs", "value": 50}
....

|===
|Nom|Sous-Type|Topic|Valeur

|set_ecs_setpoint
|action

Message
|`boiler`
|`{"setpoint": "\#title#", "value": \#message#}`
|===

.Sous-type Couleur
La configuration suivante publiera le code couleur sélectionnée via un widget sélecteur de couleur, par exemple:
....
room/lamp/color #e63939
....

|===
|Nom|Sous-Type|Topic|Valeur

|set_color
|action

Couleur
|`room/lamp/color`
|`\#color#`
|===

=== Souscription manuelle

Il est aussi possible de créer manuellement des équipements jMQTT. Cliquer sur le bouton _+_ et saisir le nom de l'équipement. Dans la page de <<Onglet Equipement>>, le topic de souscription définit les informations qui seront souscrites par l'équipement.

Pour plus d'information sur les topics MQTT, nous conseillons la lecture de https://www.hivemq.com/blog/mqtt-essentials-part-5-mqtt-topics-best-practices[MQTT Essentials Part 5: MQTT Topics & Best Practices].

=== Dupliquer un équipement

Un équipement peut être dupliqué via le bouton `Dupliquer` situé en haut à gauche de la page de configuration de l'équipement.

Une boite de dialogue demande le nom du nouvel équipement. Sont dupliqués:

   * Tous les paramètres de l'équipement y compris les paramètres de configuration avancés, sauf:
     ** Le nom bien sûr
     ** Le statut _Activer_ : l'équipement est désactivé par défaut
     ** Le topic de souscription qui est laissé vide
   * Les commandes de type action y compris leurs paramètres de configuration accessibles via la roue crantée.

IMPORTANT: Le topic des commandes dupliquées de type action doit être modifié manuellement.

NOTE: Les commandes de type info ne sont pas dupliquées. Elles seront découvertes automatiquement après définition du topic de souscription et activation de l'équipement.

=== L'équipement jeedom

Le plugin jMQTT publie en mode persistant son état de connexion sous le topic  `jeedom/status`. Les valeurs possibles sont `offline` et `online`.

Plus précisément, il publie cet état sous le topic `_Identifiant de connexion_/status`, où l'identifiant de connexion vaut jeedom par défaut et se configure via la page de <<Configuration du plugin>>.

Lorsque Jeedom est en mode détection automatique, il créé un équipement, dont le nom est `_Identifiant de connexion_` qui a ce statut en information.

Cet état permet à un équipement externe à Jeedom de connaitre son statut de connexion. Il peut aussi servir en interne Jeedom pour monitorer la connexion au broker via un scénario.